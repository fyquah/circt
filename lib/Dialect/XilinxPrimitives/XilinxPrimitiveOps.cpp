#include "mlir/IR/Builders.h"

#include "circt/Dialect/HW/HWTypes.h"
#include "circt/Dialect/XilinxPrimitives/XilinxPrimitivesOps.h"

static llvm::SmallVector<circt::hw::ModulePortInfo>
createModulePortInfos(
    mlir::MLIRContext *context,
    const llvm::ArrayRef<std::tuple<const char*, circt::hw::PortDirection, uint64_t>> portInfos)
{
  llvm::SmallVector<circt::hw::ModulePortInfo> ret;
  uint64_t argumentsIndex = 0;
  uint64_t resultsIndex = 0;
  for (auto & entry : portInfos) {
    auto portNameAttr = mlir::StringAttr::get(context, std::get<0>(entry));
    auto portDirection = std::get<1>(entry);
    auto type = mlir::IntegerType::get(context, std::get<2>(entry));
    uint64_t index = 0;
    switch (portDirection) {
      case circt::hw::PortDirection::INPUT:
      case circt::hw::PortDirection::INOUT:
        index = argumentsIndex++;
        break;
      case circt::hw::PortDirection::OUTPUT:
        index = resultsIndex++; 
        break;
    }
    ret.push_back({ portNameAttr, portDirection, type, index });
  }
  return ret;
}

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/XilinxPrimitives/XilinxPrimitives.cpp.inc"

// Provides the generated implementation for turning xilinx primitives into operations.
#include "circt/Dialect/XilinxPrimitives/XilinxRawPrimitivesOps.cpp.inc"
